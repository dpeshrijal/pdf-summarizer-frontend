'use client';

import { useState } from 'react';

export default function Home() {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadStatus, setUploadStatus] = useState<string>('');
  const [summary, setSummary] = useState<string | null>(null); 

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files) {
      setSelectedFile(event.target.files[0]);
      setUploadStatus('');
      setSummary(null);
    }
  };

 const handleUpload = async () => {
  if (!selectedFile) {
    setUploadStatus('Please select a file first.');
    return;
  }

  setUploadStatus('Getting upload URL...');
  setSummary(null); // Clear previous summary

  try {
    // 1. Get the pre-signed URL from our API
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_API_GATEWAY_URL}?fileName=${selectedFile.name}`
    );

    if (!response.ok) {
      throw new Error('Failed to get upload URL.');
    }
    
    const { uploadUrl, fileId } = await response.json();
    setUploadStatus('Uploading file...');

    // 2. Upload the file directly to S3
   const uploadResponse = await fetch(uploadUrl, {
  method: 'PUT',
  body: selectedFile,
  headers: {
    'Content-Type': 'application/pdf',
    'x-amz-meta-fileid': fileId // Add this line
  },
});

    if (!uploadResponse.ok) {
      throw new Error('S3 upload failed.');
    }

    setUploadStatus(`Upload successful! Processing...`);

    // 3. Poll for the summary result
    const pollForSummary = async () => {
      try {
        const summaryResponse = await fetch(
          `${process.env.NEXT_PUBLIC_GET_SUMMARY_API_URL}?fileId=${fileId}`
        );

        if (!summaryResponse.ok) {
          throw new Error('Failed to fetch summary status.');
        }

        const result = await summaryResponse.json();

        if (result.processingStatus === 'COMPLETED') {
          setSummary(result.summary);
          setUploadStatus('Summary complete!');
        } else if (result.processingStatus === 'FAILED') { // Optional: handle a failed status
          setUploadStatus('Processing failed. Please try again.');
        } else {
          // If status is still PENDING or something else, wait and poll again
          setTimeout(pollForSummary, 5000); // Check again in 5 seconds
        }
      } catch (pollError) {
        console.error('Polling error:', pollError);
        setUploadStatus('Error fetching summary. Please check back later.');
      }
    };

    // Start the first poll after a short delay
    setTimeout(pollForSummary, 5000);

  } catch (error) {
    console.error('Upload error:', error);
    setUploadStatus(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}; // This is the final closing brace for the handleUpload function

  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24 bg-gray-50">
      <div className="w-full max-w-lg p-8 space-y-6 bg-white rounded-xl shadow-lg">
        <h1 className="text-3xl font-bold text-center text-gray-800">
          AI PDF Summarizer
        </h1>
        <p className="text-center text-gray-600">
          Upload a PDF document and get a concise summary generated by AI.
        </p>

        <div>
          <label htmlFor="file-upload" className="sr-only">Choose file</label>
          <input
            id="file-upload"
            type="file"
            accept="application/pdf"
            onChange={handleFileChange}
            className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
          />
        </div>

        {selectedFile && (
          <div className="text-sm text-center text-gray-700">
            Selected: {selectedFile.name}
          </div>
        )}

        <button
          onClick={handleUpload}
          disabled={!selectedFile || uploadStatus.includes('Uploading')}
          className="w-full px-4 py-2 text-white font-semibold bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:bg-gray-400 disabled:cursor-not-allowed"
        >
          Upload and Summarize
        </button>

        {uploadStatus && (
          <p className="text-center text-sm text-gray-600">{uploadStatus}</p>
        )}

        {summary && (
          <div className="p-4 mt-6 bg-gray-100 rounded-md">
            <h2 className="text-xl font-semibold text-gray-800 mb-2">Summary:</h2>
            <p className="text-gray-700 whitespace-pre-wrap">{summary}</p>
          </div>
        )}
      </div>
    </main>
  );
}